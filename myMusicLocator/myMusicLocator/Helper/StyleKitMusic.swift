//
//  StyleKitMusic.swift
//  Music
//
//  Created by Christian Andersen on 06/08/2018.
//  Copyright (c) 2018 MobilePay. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKitMusic : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfOKP: UIImage?
        static var oKPTargets: [AnyObject]?
        static var imageOfCancelN: UIImage?
        static var cancelNTargets: [AnyObject]?
        static var imageOfCancelP: UIImage?
        static var cancelPTargets: [AnyObject]?
        static var imageOfSearchIconN: UIImage?
        static var searchIconNTargets: [AnyObject]?
        static var imageOfSearchIconP: UIImage?
        static var searchIconPTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawOKP() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color4 = UIColor(red: 0.494, green: 0.710, blue: 0.227, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// ok2.svg Group
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 69.54, y: 18.56))
        bezierPath.addCurve(to: CGPoint(x: 55.97, y: 5), controlPoint1: CGPoint(x: 66.2, y: 12.85), controlPoint2: CGPoint(x: 61.68, y: 8.33))
        bezierPath.addCurve(to: CGPoint(x: 37.27, y: 0), controlPoint1: CGPoint(x: 50.26, y: 1.67), controlPoint2: CGPoint(x: 44.03, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 18.56, y: 5), controlPoint1: CGPoint(x: 30.51, y: 0), controlPoint2: CGPoint(x: 24.27, y: 1.67))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 18.56), controlPoint1: CGPoint(x: 12.85, y: 8.33), controlPoint2: CGPoint(x: 8.33, y: 12.85))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 37.27), controlPoint1: CGPoint(x: 1.67, y: 24.27), controlPoint2: CGPoint(x: 0, y: 30.51))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 55.97), controlPoint1: CGPoint(x: 0, y: 44.03), controlPoint2: CGPoint(x: 1.67, y: 50.26))
        bezierPath.addCurve(to: CGPoint(x: 18.56, y: 69.54), controlPoint1: CGPoint(x: 8.33, y: 61.68), controlPoint2: CGPoint(x: 12.85, y: 66.2))
        bezierPath.addCurve(to: CGPoint(x: 37.27, y: 74.53), controlPoint1: CGPoint(x: 24.27, y: 72.87), controlPoint2: CGPoint(x: 30.51, y: 74.53))
        bezierPath.addCurve(to: CGPoint(x: 55.97, y: 69.54), controlPoint1: CGPoint(x: 44.03, y: 74.53), controlPoint2: CGPoint(x: 50.26, y: 72.87))
        bezierPath.addCurve(to: CGPoint(x: 69.53, y: 55.97), controlPoint1: CGPoint(x: 61.68, y: 66.2), controlPoint2: CGPoint(x: 66.2, y: 61.68))
        bezierPath.addCurve(to: CGPoint(x: 74.53, y: 37.27), controlPoint1: CGPoint(x: 72.87, y: 50.26), controlPoint2: CGPoint(x: 74.53, y: 44.03))
        bezierPath.addCurve(to: CGPoint(x: 69.54, y: 18.56), controlPoint1: CGPoint(x: 74.53, y: 30.51), controlPoint2: CGPoint(x: 72.87, y: 24.27))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 61.43, y: 31.59))
        bezierPath.addLine(to: CGPoint(x: 35.08, y: 57.94))
        bezierPath.addCurve(to: CGPoint(x: 32.85, y: 58.86), controlPoint1: CGPoint(x: 34.47, y: 58.55), controlPoint2: CGPoint(x: 33.72, y: 58.86))
        bezierPath.addCurve(to: CGPoint(x: 30.67, y: 57.94), controlPoint1: CGPoint(x: 32.01, y: 58.86), controlPoint2: CGPoint(x: 31.28, y: 58.55))
        bezierPath.addLine(to: CGPoint(x: 13.1, y: 40.37))
        bezierPath.addCurve(to: CGPoint(x: 12.23, y: 38.19), controlPoint1: CGPoint(x: 12.52, y: 39.79), controlPoint2: CGPoint(x: 12.23, y: 39.06))
        bezierPath.addCurve(to: CGPoint(x: 13.1, y: 35.96), controlPoint1: CGPoint(x: 12.23, y: 37.28), controlPoint2: CGPoint(x: 12.52, y: 36.54))
        bezierPath.addLine(to: CGPoint(x: 17.52, y: 31.59))
        bezierPath.addCurve(to: CGPoint(x: 19.7, y: 30.67), controlPoint1: CGPoint(x: 18.13, y: 30.98), controlPoint2: CGPoint(x: 18.86, y: 30.67))
        bezierPath.addCurve(to: CGPoint(x: 21.88, y: 31.59), controlPoint1: CGPoint(x: 20.54, y: 30.67), controlPoint2: CGPoint(x: 21.27, y: 30.98))
        bezierPath.addLine(to: CGPoint(x: 32.85, y: 42.56))
        bezierPath.addLine(to: CGPoint(x: 52.65, y: 22.81))
        bezierPath.addCurve(to: CGPoint(x: 54.83, y: 21.88), controlPoint1: CGPoint(x: 53.26, y: 22.19), controlPoint2: CGPoint(x: 53.99, y: 21.88))
        bezierPath.addCurve(to: CGPoint(x: 57.02, y: 22.81), controlPoint1: CGPoint(x: 55.67, y: 21.88), controlPoint2: CGPoint(x: 56.4, y: 22.19))
        bezierPath.addLine(to: CGPoint(x: 61.43, y: 27.17))
        bezierPath.addCurve(to: CGPoint(x: 62.3, y: 29.41), controlPoint1: CGPoint(x: 62.01, y: 27.76), controlPoint2: CGPoint(x: 62.3, y: 28.5))
        bezierPath.addCurve(to: CGPoint(x: 61.43, y: 31.59), controlPoint1: CGPoint(x: 62.3, y: 30.28), controlPoint2: CGPoint(x: 62.01, y: 31.01))
        bezierPath.close()
        bezierPath.miterLimit = 4;

        color4.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        context!.saveGState()
        CGContextClipToRect(context!, bezierPath.bounds)
        CGContextSetShadow(context!, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let bezierOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        CGContextSetShadowWithColor(context!, shadow.shadowOffset, shadow.shadowBlurRadius, bezierOpaqueShadow.CGColor)
        CGContextSetBlendMode(context!, .sourceOut)
        CGContextBeginTransparencyLayer(context!, nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        color4.setStroke()
        bezierPath.lineWidth = 0
        bezierPath.stroke()




        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16


        //// Group 17
    }

    public class func drawCancelN() {
        //// Color Declarations
        let color4 = UIColor(red: 0.494, green: 0.710, blue: 0.227, alpha: 1.000)

        //// cancel4.svg Group
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 37.5, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 37.5), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 16.8))
        bezierPath.addCurve(to: CGPoint(x: 37.5, y: 75), controlPoint1: CGPoint(x: 0, y: 58.21), controlPoint2: CGPoint(x: 16.79, y: 75))
        bezierPath.addCurve(to: CGPoint(x: 75, y: 37.5), controlPoint1: CGPoint(x: 58.22, y: 75), controlPoint2: CGPoint(x: 75, y: 58.21))
        bezierPath.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 16.8), controlPoint2: CGPoint(x: 58.22, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 60.89, y: 50.04))
        bezierPath.addLine(to: CGPoint(x: 50.04, y: 60.88))
        bezierPath.addLine(to: CGPoint(x: 37.5, y: 48.34))
        bezierPath.addLine(to: CGPoint(x: 24.96, y: 60.88))
        bezierPath.addLine(to: CGPoint(x: 14.12, y: 50.04))
        bezierPath.addLine(to: CGPoint(x: 26.66, y: 37.49))
        bezierPath.addLine(to: CGPoint(x: 14.12, y: 24.96))
        bezierPath.addLine(to: CGPoint(x: 24.96, y: 14.12))
        bezierPath.addLine(to: CGPoint(x: 37.5, y: 26.65))
        bezierPath.addLine(to: CGPoint(x: 50.04, y: 14.12))
        bezierPath.addLine(to: CGPoint(x: 60.89, y: 24.96))
        bezierPath.addLine(to: CGPoint(x: 48.34, y: 37.49))
        bezierPath.addLine(to: CGPoint(x: 60.89, y: 50.04))
        bezierPath.close()
        bezierPath.miterLimit = 4;

        color4.setFill()
        bezierPath.fill()




        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16


        //// Group 17
    }

    public class func drawCancelP() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color4 = UIColor(red: 0.494, green: 0.710, blue: 0.227, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// cancel4.svg Group
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 37.5, y: 0))
        bezierPath.addCurveToPoint(CGPoint(x: 0, y: 37.5), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 16.8))
        bezierPath.addCurveToPoint(CGPoint(x: 37.5, y: 75), controlPoint1: CGPoint(x: 0, y: 58.21), controlPoint2: CGPoint(x: 16.79, y: 75))
        bezierPath.addCurveToPoint(CGPoint(x: 75, y: 37.5), controlPoint1: CGPoint(x: 58.22, y: 75), controlPoint2: CGPoint(x: 75, y: 58.21))
        bezierPath.addCurveToPoint(CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 16.8), controlPoint2: CGPoint(x: 58.22, y: 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 60.89, y: 50.04))
        bezierPath.addLineToPoint(CGPoint(x: 50.04, y: 60.88))
        bezierPath.addLineToPoint(CGPoint(x: 37.5, y: 48.34))
        bezierPath.addLineToPoint(CGPoint(x: 24.96, y: 60.88))
        bezierPath.addLineToPoint(CGPoint(x: 14.12, y: 50.04))
        bezierPath.addLineToPoint(CGPoint(x: 26.66, y: 37.49))
        bezierPath.addLineToPoint(CGPoint(x: 14.12, y: 24.96))
        bezierPath.addLineToPoint(CGPoint(x: 24.96, y: 14.12))
        bezierPath.addLineToPoint(CGPoint(x: 37.5, y: 26.65))
        bezierPath.addLineToPoint(CGPoint(x: 50.04, y: 14.12))
        bezierPath.addLineToPoint(CGPoint(x: 60.89, y: 24.96))
        bezierPath.addLineToPoint(CGPoint(x: 48.34, y: 37.49))
        bezierPath.addLineToPoint(CGPoint(x: 60.89, y: 50.04))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        color4.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, bezierPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((shadow.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let bezierOpaqueShadow = (shadow.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, bezierOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()





        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16


        //// Group 17
    }

    public class func drawSearchIconN() {
        //// Color Declarations
        let color4 = UIColor(red: 0.494, green: 0.710, blue: 0.227, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 0.998, blue: 0.995, alpha: 1.000)

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0.25, y: -0.17, width: 74.5, height: 74.5))
        color4.setFill()
        ovalPath.fill()




        //// magnifying.svg Group
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 42.19, y: 25.46))
        bezierPath.addCurve(to: CGPoint(x: 25.46, y: 25.46), controlPoint1: CGPoint(x: 37.58, y: 20.85), controlPoint2: CGPoint(x: 30.07, y: 20.85))
        bezierPath.addCurve(to: CGPoint(x: 25.46, y: 42.19), controlPoint1: CGPoint(x: 20.85, y: 30.07), controlPoint2: CGPoint(x: 20.85, y: 37.58))
        bezierPath.addCurve(to: CGPoint(x: 40.58, y: 43.53), controlPoint1: CGPoint(x: 29.57, y: 46.3), controlPoint2: CGPoint(x: 35.97, y: 46.74))
        bezierPath.addCurve(to: CGPoint(x: 41.25, y: 44.79), controlPoint1: CGPoint(x: 40.67, y: 43.99), controlPoint2: CGPoint(x: 40.89, y: 44.43))
        bezierPath.addLine(to: CGPoint(x: 47.97, y: 51.51))
        bezierPath.addCurve(to: CGPoint(x: 51.5, y: 51.51), controlPoint1: CGPoint(x: 48.95, y: 52.48), controlPoint2: CGPoint(x: 50.53, y: 52.48))
        bezierPath.addCurve(to: CGPoint(x: 51.5, y: 47.97), controlPoint1: CGPoint(x: 52.48, y: 50.53), controlPoint2: CGPoint(x: 52.48, y: 48.95))
        bezierPath.addLine(to: CGPoint(x: 44.79, y: 41.25))
        bezierPath.addCurve(to: CGPoint(x: 43.53, y: 40.58), controlPoint1: CGPoint(x: 44.43, y: 40.9), controlPoint2: CGPoint(x: 43.99, y: 40.67))
        bezierPath.addCurve(to: CGPoint(x: 42.19, y: 25.46), controlPoint1: CGPoint(x: 46.74, y: 35.97), controlPoint2: CGPoint(x: 46.3, y: 29.57))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 40.07, y: 40.07))
        bezierPath.addCurve(to: CGPoint(x: 27.58, y: 40.07), controlPoint1: CGPoint(x: 36.63, y: 43.52), controlPoint2: CGPoint(x: 31.02, y: 43.52))
        bezierPath.addCurve(to: CGPoint(x: 27.58, y: 27.58), controlPoint1: CGPoint(x: 24.14, y: 36.63), controlPoint2: CGPoint(x: 24.14, y: 31.03))
        bezierPath.addCurve(to: CGPoint(x: 40.07, y: 27.58), controlPoint1: CGPoint(x: 31.02, y: 24.14), controlPoint2: CGPoint(x: 36.63, y: 24.14))
        bezierPath.addCurve(to: CGPoint(x: 40.07, y: 40.07), controlPoint1: CGPoint(x: 43.52, y: 31.03), controlPoint2: CGPoint(x: 43.52, y: 36.63))
        bezierPath.closeclose()
        bezierPath.miterLimit = 4;

        fillColor3.setFill()
        bezierPath.fill()




        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16


        //// Group 17
    }

    public class func drawSearchIconP() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color4 = UIColor(red: 0.494, green: 0.710, blue: 0.227, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 0.998, blue: 0.995, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0.25, y: -0.17, width: 74.5, height: 74.5))
        color4.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        context!.saveGState()
        CGContextClipToRect(context!, ovalPath.bounds)
        CGContextSetShadow(context!, CGSize.zero, 0)
        context!.setAlpha(CGColorGetAlpha((shadow.shadowColor as! UIColor).cgColor))
        CGContextBeginTransparencyLayer(context!, nil)
        let ovalOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        CGContext.setShadowWithColor(context!, shadow.shadowOffset, shadow.shadowBlurRadius, ovalOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        CGContext.beginTransparencyLayer(<#T##CGContext#>)  beginTransparencyLayer(in: context!, auxiliaryInfo: nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()





        //// magnifying.svg Group
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 42.19, y: 28.46))
        bezierPath.addCurve(to: CGPoint(x: 25.46, y: 28.46), controlPoint1: CGPoint(x: 37.58, y: 23.85), controlPoint2: CGPoint(x: 30.07, y: 23.85))
        bezierPath.addCurve(to: CGPoint(x: 25.46, y: 45.19), controlPoint1: CGPoint(x: 20.85, y: 33.07), controlPoint2: CGPoint(x: 20.85, y: 40.58))
        bezierPath.addCurve(to: CGPoint(x: 40.58, y: 46.53), controlPoint1: CGPoint(x: 29.57, y: 49.3), controlPoint2: CGPoint(x: 35.97, y: 49.74))
        bezierPath.addCurve(to: CGPoint(x: 41.25, y: 47.79), controlPoint1: CGPoint(x: 40.67, y: 46.99), controlPoint2: CGPoint(x: 40.89, y: 47.43))
        bezierPath.addLine(to: CGPoint(x: 47.97, y: 54.51))
        bezierPath.addCurve(to: CGPoint(x: 51.5, y: 54.51), controlPoint1: CGPoint(x: 48.95, y: 55.48), controlPoint2: CGPoint(x: 50.53, y: 55.48))
        bezierPath.addCurve(to: CGPoint(x: 51.5, y: 50.97), controlPoint1: CGPoint(x: 52.48, y: 53.53), controlPoint2: CGPoint(x: 52.48, y: 51.95))
        bezierPath.addLine(to: CGPoint(x: 44.79, y: 44.25))
        bezierPath.addCurve(to: CGPoint(x: 43.53, y: 43.58), controlPoint1: CGPoint(x: 44.43, y: 43.9), controlPoint2: CGPoint(x: 43.99, y: 43.67))
        bezierPath.addCurve(to: CGPoint(x: 42.19, y: 28.46), controlPoint1: CGPoint(x: 46.74, y: 38.97), controlPoint2: CGPoint(x: 46.3, y: 32.57))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 40.07, y: 43.07))
        bezierPath.addCurve(to: CGPoint(x: 27.58, y: 43.07), controlPoint1: CGPoint(x: 36.63, y: 46.52), controlPoint2: CGPoint(x: 31.02, y: 46.52))
        bezierPath.addCurve(to: CGPoint(x: 27.58, y: 30.58), controlPoint1: CGPoint(x: 24.14, y: 39.63), controlPoint2: CGPoint(x: 24.14, y: 34.03))
        bezierPath.addCurve(to: CGPoint(x: 40.07, y: 30.58), controlPoint1: CGPoint(x: 31.02, y: 27.14), controlPoint2: CGPoint(x: 36.63, y: 27.14))
        bezierPath.addCurve(to: CGPoint(x: 40.07, y: 43.07), controlPoint1: CGPoint(x: 43.52, y: 34.03), controlPoint2: CGPoint(x: 43.52, y: 39.63))
        bezierPath.close()
        bezierPath.miterLimit = 4;

        fillColor3.setFill()
        bezierPath.fill()




        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16


        //// Group 17
    }

    //// Generated Images

    public class var imageOfOKP: UIImage {
        if Cache.imageOfOKP != nil {
            return Cache.imageOfOKP!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 75), false, 0)
            StyleKitMusic.drawOKP()

        Cache.imageOfOKP = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfOKP!
    }

    public class var imageOfCancelN: UIImage {
        if Cache.imageOfCancelN != nil {
            return Cache.imageOfCancelN!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 75), false, 0)
            StyleKitMusic.drawCancelN()

        Cache.imageOfCancelN = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfCancelN!
    }

    public class var imageOfCancelP: UIImage {
        if Cache.imageOfCancelP != nil {
            return Cache.imageOfCancelP!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 75), false, 0)
            StyleKitMusic.drawCancelP()

        Cache.imageOfCancelP = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfCancelP!
    }

    public class var imageOfSearchIconN: UIImage {
        if Cache.imageOfSearchIconN != nil {
            return Cache.imageOfSearchIconN!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 75), false, 0)
            StyleKitMusic.drawSearchIconN()

        Cache.imageOfSearchIconN = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSearchIconN!
    }

    public class var imageOfSearchIconP: UIImage {
        if Cache.imageOfSearchIconP != nil {
            return Cache.imageOfSearchIconP!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 75), false, 0)
            StyleKitMusic.drawSearchIconP()

        Cache.imageOfSearchIconP = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSearchIconP!
    }

    //// Customization Infrastructure

    @IBOutlet var oKPTargets: [AnyObject]! {
        get { return Cache.oKPTargets }
        set {
            Cache.oKPTargets = newValue
            for target: AnyObject in newValue {
                target.perform(NSSelectorFromString("setImage:"), with: StyleKitMusic.imageOfOKP)
            }
        }
    }

    @IBOutlet var cancelNTargets: [AnyObject]! {
        get { return Cache.cancelNTargets }
        set {
            Cache.cancelNTargets = newValue
            for target: AnyObject in newValue {
                target.perform(NSSelectorFromString("setImage:"), with: StyleKitMusic.imageOfCancelN)
            }
        }
    }

    @IBOutlet var cancelPTargets: [AnyObject]! {
        get { return Cache.cancelPTargets }
        set {
            Cache.cancelPTargets = newValue
            for target: AnyObject in newValue {
                target.perform(NSSelectorFromString("setImage:"), with: StyleKitMusic.imageOfCancelP)
            }
        }
    }

    @IBOutlet var searchIconNTargets: [AnyObject]! {
        get { return Cache.searchIconNTargets }
        set {
            Cache.searchIconNTargets = newValue
            for target: AnyObject in newValue {
                target.perform(NSSelectorFromString("setImage:"), with: StyleKitMusic.imageOfSearchIconN)
            }
        }
    }

    @IBOutlet var searchIconPTargets: [AnyObject]! {
        get { return Cache.searchIconPTargets }
        set {
            Cache.searchIconPTargets = newValue
            for target: AnyObject in newValue {
                target.perform(NSSelectorFromString("setImage:"), with: StyleKitMusic.imageOfSearchIconP)
            }
        }
    }

}
